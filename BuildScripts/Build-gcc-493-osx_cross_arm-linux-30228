#!/bin/bash

# Do not define var in this script. Define tham all in SetupEnv-$BUILDGCC_SUFFIX.
# The goal is to be able to copy and paste command from this script to a console. Helped me a lot when debugging step by step

if [ -z "$BUILDGCC_BUILD_DIR" ]
then
  echo BUILDGCC_BUILD_DIR not defined
  exit 1
fi

#[ -z "$BUILDGCC_SYSTEM_HEADER_DIR"  -a  -d "/JiefLand/5.Devel" ] && export BUILDGCC_SYSTEM_HEADER_DIR=/JiefLand/5.Devel/Syno/DSM6.0/ds.armada370-6.0.dev/usr/local/arm-unknown-linux-gnueabi/arm-unknown-linux-gnueabi/sysroot/usr/include
#[ -z "$BUILDGCC_SYSTEM_HEADER_DIR"  -a  -d "/Volumes/5.Devel" ] && export BUILDGCC_SYSTEM_HEADER_DIR=/Volumes/5.Devel/Syno/DSM6.0/ds.armada370-6.0.dev/usr/local/arm-unknown-linux-gnueabi/arm-unknown-linux-gnueabi/sysroot/usr/include
#if [ -z "$BUILDGCC_SYSTEM_HEADER_DIR" ]
#then
#  echo Please define BUILDGCC_SYSTEM_HEADER_DIR to the path of target system includes.
#  exit 1
#fi


# ulimit maybe not needed.
ulimit -n 1024
set -u -o pipefail

#If every component are already sucessfully built, "$BUILDGCC_BUILD_DIR"/make_sucessfully.done will be recreated immediately.
[ -f "$BUILDGCC_BUILD_DIR"/make_sucessfully.done ] && rm "$BUILDGCC_BUILD_DIR"/make_sucessfully.done

mkdir -p "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM
mkdir -p "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/usr
# on Lion, we must specify destination name ('include') even if it's the same
[[ ! -L "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/usr/include ]] && ln -s ../include/ "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/usr/include

mkdir -p "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/include
"$BUILDGCC_BUILDSCRIPTS"/Extract "include_linux-dsm6.0" $TARGET_PLATFORM/include linux || exit 1
"$BUILDGCC_BUILDSCRIPTS"/Extract "include_asm-dsm6.0" $TARGET_PLATFORM/include asm || exit 1
"$BUILDGCC_BUILDSCRIPTS"/Extract "include_asm-generic-dsm6.0" $TARGET_PLATFORM/include asm-generic || exit 1



echo *-*-*-*------------------------------------------------------------------ GMP ------------------------------------------------------------------------

if [ ! -f "$BUILDGCC_BUILD_DIR"/$GMP_SOURCES_DIR-build/make_sucessfully.done ]; then

	"$BUILDGCC_BUILDSCRIPTS"/Extract "$GMP_SOURCES_DIR" || exit 1
		
	rm -rf "$BUILDGCC_BUILD_DIR"/$GMP_SOURCES_DIR-build
	mkdir "$BUILDGCC_BUILD_DIR"/$GMP_SOURCES_DIR-build
	cd "$BUILDGCC_BUILD_DIR"/$GMP_SOURCES_DIR-build
	
	#--disable-assembly <- needed for isl
	
	
	
	#had to put flags in CC (instead of CFLAGS) variable so they are used when configure do the "check how to run preprocessor"
	../$GMP_SOURCES_DIR/configure CPPFLAGS="-fexceptions" \
	  CC="gcc -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	  CXX="g++ -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	  --prefix="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	  --enable-cxx \
	  --disable-shared \
	  --disable-assembly \
	  --with-pic \
	   2>&1 | tee configure-stdout.log
	
	if [[ -f config.status ]]; then
	    make $BUILDGCC_MAKEJOBS 2>&1 | tee make-stdout.log
	    #[[ $? == 0 ]] && make $BUILDGCC_MAKEJOBS check 2>&1 | tee make-check-stdout.log
	    [[ $? == 0 ]] && make install 2>&1 | tee make-install-stdout.log
	    [[ $? == 0 ]] && touch make_sucessfully.done
	fi

fi
if [ ! -f "$BUILDGCC_BUILD_DIR"/$GMP_SOURCES_DIR-build/make_sucessfully.done ]
then
	echo *-*-*-*------------------------------------------------------------------ GMP failed ------------------------------------------------------------------------
	exit 1
fi


echo *-*-*-*------------------------------------------------------------------ MPFR ------------------------------------------------------------------------

if [[ -f "$BUILDGCC_BUILD_DIR"/$GMP_SOURCES_DIR-build/make_sucessfully.done   &&  ! -f "$BUILDGCC_BUILD_DIR"/$MPFR_SOURCES_DIR-build/make_sucessfully.done ]]; then

	"$BUILDGCC_BUILDSCRIPTS"/Extract "$MPFR_SOURCES_DIR" || exit 1

	rm -rf "$BUILDGCC_BUILD_DIR"/$MPFR_SOURCES_DIR-build
	mkdir "$BUILDGCC_BUILD_DIR"/$MPFR_SOURCES_DIR-build
	cd "$BUILDGCC_BUILD_DIR"/$MPFR_SOURCES_DIR-build
	
	../$MPFR_SOURCES_DIR/configure \
	  CC="gcc -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	  CXX="g++ -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
      --prefix="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
      --with-gmp="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	  --disable-shared \
	    2>&1 | tee configure-stdout.log
	
	# --enable-shared \ <- error illegal text-relocation to '___gmp_binvert_limb_table'
	#--disable-assembly \ <- not recognized
	  
	if [[ -f config.status ]]; then
	    make $BUILDGCC_MAKEJOBS 2>&1 | tee make-stdout.log
	    #[[ $? == 0 ]] && make $BUILDGCC_MAKEJOBS check 2>&1 | tee make-check-stdout.log
	    [[ $? == 0 ]] && make install 2>&1 | tee make-install-stdout.log
	    [[ $? == 0 ]] && touch make_sucessfully.done
	fi

fi
if [ ! -f "$BUILDGCC_BUILD_DIR"/$MPFR_SOURCES_DIR-build/make_sucessfully.done ]
then
	echo *-*-*-*------------------------------------------------------------------ MPFR failed ------------------------------------------------------------------------
	exit 1
fi


echo *-*-*-*------------------------------------------------------------------ MPC ------------------------------------------------------------------------

if [[ -f "$BUILDGCC_BUILD_DIR"/$MPFR_SOURCES_DIR-build/make_sucessfully.done   &&  ! -f "$BUILDGCC_BUILD_DIR"/$MPC_SOURCES_DIR-build/make_sucessfully.done ]]; then

	"$BUILDGCC_BUILDSCRIPTS"/Extract "$MPC_SOURCES_DIR" || exit 1

	rm -rf "$BUILDGCC_BUILD_DIR"/$MPC_SOURCES_DIR-build
	mkdir "$BUILDGCC_BUILD_DIR"/$MPC_SOURCES_DIR-build
	cd "$BUILDGCC_BUILD_DIR"/$MPC_SOURCES_DIR-build
	
	../$MPC_SOURCES_DIR/configure \
	  CC="gcc -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	  CXX="g++ -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
      --prefix="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	  --disable-shared \
      --with-gmp="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
      --with-mpfr="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	    2>&1 | tee configure-stdout.log
	
	if [[ -f config.status ]]; then
	    make $BUILDGCC_MAKEJOBS 2>&1 | tee make-stdout.log
	    #[[ $? == 0 ]] && make $BUILDGCC_MAKEJOBS check 2>&1 | tee make-check-stdout.log
	    [[ $? == 0 ]] && make install 2>&1 | tee make-install-stdout.log
	    [[ $? == 0 ]] && touch make_sucessfully.done
	fi

fi
if [ ! -f "$BUILDGCC_BUILD_DIR"/$MPC_SOURCES_DIR-build/make_sucessfully.done ]
then
	echo *-*-*-*------------------------------------------------------------------ MPC failed ------------------------------------------------------------------------
	exit 1
fi


if [ ! -z "${ELF_SOURCES_DIR-}" ]
then
echo *-*-*-*------------------------------------------------------------------ ELF ------------------------------------------------------------------------

if [[ ! -f "$BUILDGCC_BUILD_DIR"/$ELF_SOURCES_DIR-build/make_sucessfully.done ]]; then
	
	"$BUILDGCC_BUILDSCRIPTS"/Extract "$ELF_SOURCES_DIR" || exit 1

	rm -rf "$BUILDGCC_BUILD_DIR"/$ELF_SOURCES_DIR-build
	mkdir "$BUILDGCC_BUILD_DIR"/$ELF_SOURCES_DIR-build
	cd "$BUILDGCC_BUILD_DIR"/$ELF_SOURCES_DIR-build
	
	
	
	../$ELF_SOURCES_DIR/configure \
	  CC="gcc -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	  CXX="g++ -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	  --prefix="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	   2>&1 | tee configure-stdout.log
	
	if [[ -f config.status ]]; then
	    make $BUILDGCC_MAKEJOBS 2>&1 | tee make-stdout.log
	    #[[ $? == 0 ]] && make $BUILDGCC_MAKEJOBS check 2>&1 | tee make-check-stdout.log
	    [[ $? == 0 ]] && make install 2>&1 | tee make-install-stdout.log
	    [[ $? == 0 ]] && touch make_sucessfully.done
	
	fi
	
	fi
    if [ ! -f "$BUILDGCC_BUILD_DIR"/$ELF_SOURCES_DIR-build/make_sucessfully.done ]
    then
	    echo *-*-*-*------------------------------------------------------------------ ELF failed------------------------------------------------------------------------
	    exit 1
    fi
fi



echo *-*-*-*------------------------------------------------------------------ ISL ------------------------------------------------------------------------

if [[ -f "$BUILDGCC_BUILD_DIR"/$MPC_SOURCES_DIR-build/make_sucessfully.done   &&  ! -f "$BUILDGCC_BUILD_DIR"/$ISL_SOURCES_DIR-build/make_sucessfully.done ]]; then

	"$BUILDGCC_BUILDSCRIPTS"/Extract "$ISL_SOURCES_DIR" || exit 1
	
	rm -rf "$BUILDGCC_BUILD_DIR"/$ISL_SOURCES_DIR-build
	mkdir "$BUILDGCC_BUILD_DIR"/$ISL_SOURCES_DIR-build
	cd "$BUILDGCC_BUILD_DIR"/$ISL_SOURCES_DIR-build
	
	
	
	../$ISL_SOURCES_DIR/configure \
	  CC="gcc -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	  CXX="g++ -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	  --prefix="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	  --with-gmp-prefix="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	  --with-pic=PIC \
	   2>&1 | tee configure-stdout.log
	
	if [[ -f config.status ]]; then
	    make $BUILDGCC_MAKEJOBS 2>&1 | tee make-stdout.log
	    #[[ $? == 0 ]] && make $BUILDGCC_MAKEJOBS check 2>&1 | tee make-check-stdout.log
	    [[ $? == 0 ]] && make install 2>&1 | tee make-install-stdout.log
		[[ $? == 0 ]] && mkdir -p "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/dylib
		[[ $? == 0 ]] && cp -a "$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM/lib/libisl* "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/dylib
	    [[ $? == 0 ]] && touch make_sucessfully.done
	fi

fi
if [ ! -f "$BUILDGCC_BUILD_DIR"/$ISL_SOURCES_DIR-build/make_sucessfully.done ]
then
	echo *-*-*-*------------------------------------------------------------------ ISL failed------------------------------------------------------------------------
	exit 1
fi


echo *-*-*-*------------------------------------------------------------------ Cloog ------------------------------------------------------------------------

if [[ -f "$BUILDGCC_BUILD_DIR"/$ISL_SOURCES_DIR-build/make_sucessfully.done &&  ! -f "$BUILDGCC_BUILD_DIR"/$CLOOG_SOURCES_DIR-build/make_sucessfully.done ]]; then

	"$BUILDGCC_BUILDSCRIPTS"/Extract "$CLOOG_SOURCES_DIR" || exit 1
	
	rm -rf "$BUILDGCC_BUILD_DIR"/$CLOOG_SOURCES_DIR-build
	mkdir "$BUILDGCC_BUILD_DIR"/$CLOOG_SOURCES_DIR-build
	cd "$BUILDGCC_BUILD_DIR"/$CLOOG_SOURCES_DIR-build
	
	../$CLOOG_SOURCES_DIR/configure \
	  CC="gcc -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	  CXX="g++ -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
      --prefix="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	  --disable-shared \
      --with-gmp-prefix="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
      --with-isl-prefix="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	    2>&1 | tee configure-stdout.log
	
	if [[ -f config.status ]]; then
        make $BUILDGCC_MAKEJOBS 2>&1 | tee make-stdout.log
        #[[ $? == 0 ]] && make $BUILDGCC_MAKEJOBS check 2>&1 | tee make-check-stdout.log
	    [[ $? == 0 ]] && make install 2>&1 | tee make-install-stdout.log
	    [[ $? == 0 ]] && touch make_sucessfully.done
	fi

fi
if [ ! -f "$BUILDGCC_BUILD_DIR"/$CLOOG_SOURCES_DIR-build/make_sucessfully.done ]
then
	echo *-*-*-*------------------------------------------------------------------ Cloog failed------------------------------------------------------------------------
	exit 1
fi


echo *-*-*-*------------------------------------------------------------------ BINUTILS ------------------------------------------------------------------------

if [[ -f "$BUILDGCC_BUILD_DIR"/$CLOOG_SOURCES_DIR-build/make_sucessfully.done  &&  ! -f "$BUILDGCC_BUILD_DIR"/$BINUTILS_SOURCES_DIR-build/make_sucessfully.done ]]; then

	"$BUILDGCC_BUILDSCRIPTS"/Extract "$BINUTILS_SOURCES_DIR" || exit 1
	
	rm -rf "$BUILDGCC_BUILD_DIR"/$BINUTILS_SOURCES_DIR-build
	mkdir "$BUILDGCC_BUILD_DIR"/$BINUTILS_SOURCES_DIR-build
	cd "$BUILDGCC_BUILD_DIR"/$BINUTILS_SOURCES_DIR-build
	
	../$BINUTILS_SOURCES_DIR/configure \
	  	  CC="gcc -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	      CXX="g++ -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	     --disable-werror \
	     --prefix="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM \
	     --target=$TARGET_PLATFORM \
	     --with-sysroot \
	     --disable-multilib \
	     --enable-poison-system-directories \
	       2>&1 | tee configure-stdout.log
	  
	if [[ -f config.status ]]; then
	    make $BUILDGCC_MAKEJOBS 2>&1 | tee make-stdout.log
	    [[ $? == 0 ]] && make install 2>&1 | tee make-install-stdout.log
	    if [[ $? == 0 ]]
	    then
        	echo "update_all_lib_path"
        	update_all_lib_path "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM
			[[ $? == 0 ]] && touch make_sucessfully.done
	    fi
	fi

fi
if [ ! -f "$BUILDGCC_BUILD_DIR"/$BINUTILS_SOURCES_DIR-build/make_sucessfully.done ]
then
	echo *-*-*-*------------------------------------------------------------------ BINUTILS failed------------------------------------------------------------------------
	exit 1
fi


echo *-*-*-*------------------------------------------------------------------ GCC cross1 ------------------------------------------------------------------------

if [[ -f "$BUILDGCC_BUILD_DIR"/$BINUTILS_SOURCES_DIR-build/make_sucessfully.done   &&  ! -f "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR-cross1-build/make_sucessfully.done ]]; then

	"$BUILDGCC_BUILDSCRIPTS"/Extract "$GCC_SOURCES_DIR" || exit 1

	#to avoid : checking for shl_load... configure: error: Link tests are not allowed after GCC_NO_EXECUTABLES.
	#./$GCC_SOURCES_DIR/libtool.m4
	#  delete line 5279 (LT_SYS_DLOPEN_SELF)
	
	#./$GCC_SOURCES_DIR/gcc/cp/Make-lang.in
	#  line 73 :
	#    CXX_C_OBJS = attribs.o c-common.o c-format.o c-pragma.o c-semantics.o c-lex.o \
	#	c-dump.o $(CXX_TARGET_OBJS) c-pretty-print.o c-opts.o c-pch.o \
	#	incpath.o cppdefault.o c-ppoutput.o c-cppbuiltin.o prefix.o \
	#	c-gimplify.o c-omp.o tree-inline.o
	#      -> remove cppdefault.o & tree-inline.o
	
	
	
	rm -rf "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR-cross1-build
	mkdir "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR-cross1-build
	cd "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR-cross1-build 
	
	#--disable-threads -> to enable thread, pthread.h is needed.
	# --with-sysroot="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM \
	
    ../$GCC_SOURCES_DIR/configure \
	 CC="gcc -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	 CXX="g++ -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	 --target=$TARGET_PLATFORM \
	 --prefix="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM \
	 --enable-languages=c  \
	 --enable-werror=no \
	 --with-arch=armv7-a \
	 --with-float=hard \
	 --disable-threads \
	 --disable-multilib \
	 --disable-libmudflap \
	 --disable-libssp \
	 --disable-libatomic \
	 --disable-libitm \
	 --disable-libquadmath \
	 --disable-libsanitizer \
	 --disable-libvtv \
	 --disable-libcilkrts \
	 --disable-libstdcxx \
	 --disable-libstdcxx-pch \
	 --disable-libgomp \
	 --disable-shared \
	 --disable-lto \
	 --disable-nls \
	 --without-ppl \
	 --enable-poison-system-directories \
     --with-gmp="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
     --with-mpfr="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
     --with-mpc="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
     --with-isl="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
     --with-cloog="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	 --without-headers \
	    2>&1 | tee configure-stdout.log
	
	if [[ -f config.status ]]; then
        make $BUILDGCC_MAKEJOBS all-gcc 2>&1 | tee make-all-gcc-stdout.log
	    [[ $? == 0 ]] && make install-gcc 2>&1 | tee make-install-gcc-stdout.log
	    [[ $? == 0 ]] && make $BUILDGCC_MAKEJOBS all-target-libgcc 2>&1 | tee make-all-target-libgcc-stdout.log
	    [[ $? == 0 ]] && make install-target-libgcc  2>&1 | tee make-install-target-libgcc-stdout.log  # this install crtbegin.o etc.
	    [[ $? == 0 ]] && touch make_sucessfully.done
	fi

fi
if [ ! -f "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR-cross1-build/make_sucessfully.done ]
then
	echo *-*-*-*------------------------------------------------------------------ GCC cross 1 failed------------------------------------------------------------------------
	exit 1
fi


echo *-*-*-*------------------------------------------------------------------ GLIBC Headers ------------------------------------------------------------------------

if [[ -f "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR-cross1-build/make_sucessfully.done   &&  ! -f "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR-headers-build/make_sucessfully.done ]]; then

	"$BUILDGCC_BUILDSCRIPTS"/Extract "$GLIBC_SOURCES_DIR" || exit 1
	
	rm -rf "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR-headers-build
	mkdir "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR-headers-build
	cd "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR-headers-build
	
	cp -n "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/scripts/sysd-rules.awk "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/scripts/sysd-rules.orig
patch -o "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/scripts/sysd-rules.awk "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/scripts/sysd-rules.orig <<"END_OF_PATCH"
--- scripts/sysd-rules.awk
+++ scripts/sysd-rules.awk.new
@@ -53,7 +53,7 @@  BEGIN {
         if (target_pattern == "%") {
           command_suffix = "";
         } else {
-          prefix = gensub(/%/, "", "", target_pattern);
+          prefix = gensub(/%/, "", 1, target_pattern);
           command_suffix = " $(" prefix  "CPPFLAGS)";
         }
         target = "$(objpfx)" target_pattern o ":";
END_OF_PATCH
	
	#cp -n "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/Makefile "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/Makefile.orig
	#sed '167s|$(BUILD_CC) $^ $(BUILD_LDFLAGS) -o $@|$(BUILD_CC) $^ $(BUILD_LDFLAGS) -lintl -o $@|' "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/Makefile.orig \
	#  | sed '167s/-lintl//' \
	#  >"$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/Makefile
	cp -n "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/rpc_main.c "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/rpc_main.c.orig
	sed '41s|^#include <libintl.h>|//#include <libintl.h>|' "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/rpc_main.c.orig \
	  | sed '56s|^|#define _(str) str|' \
	  | sed '177s|^  setlocale|//  setlocale|' \
	  | sed '178s|^  textdomain|//  textdomain|' \
	  >"$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/rpc_main.c
	#cp -n "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/rpc_scan.c "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/rpc_scan.c.orig
	#sed '40s|#include <libintl.h>|//#include <libintl.h>|' "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/rpc_scan.c.orig \
	#  >"$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/rpc_scan.c
	
	
	
	../$GLIBC_SOURCES_DIR/configure \
	  BUILD_CC="gcc -I$BUILDGCC_TOOLS_DIR/AppleDevTools/include" \
	  CC="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/bin/$TARGET_PLATFORM-gcc \
	  CXX="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/bin/$TARGET_PLATFORM-g++ \
	  AR="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/bin/$TARGET_PLATFORM-ar \
	  RANLIB="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/bin/$TARGET_PLATFORM-ranlib \
	  READELF="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/bin/$TARGET_PLATFORM-readelf \
	  --prefix="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM \
	  --host=$TARGET_PLATFORM \
	  --exec-prefix="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM \
      --with-binutils="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM/bin \
      --with-headers="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/usr/include \
      --enable-add-ons \
	  --disable-shared \
	  libc_cv_ssp=yes \
	  libc_cv_predef_stack_protector=no \
	  libc_cv_z_relro=yes \
	  libc_cv_forced_unwind=yes          \
	  libc_cv_c_cleanup=yes \
	    2>&1 | tee configure-stdout.log
	
	if [[ -f config.status ]]; then
	    mkdir -p "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/include/gnu
	    touch "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/include/gnu/stubs.h
	    [[ $? == 0 ]] && make install-headers 2>&1 | tee make-install-headers-stdout.log
	    [[ $? == 0 ]] && touch make_sucessfully.done
	fi

fi
if [ ! -f "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR-headers-build/make_sucessfully.done ]
then
	echo *-*-*-*------------------------------------------------------------------ GLIBC Headers failed------------------------------------------------------------------------
	exit 1
fi


echo *-*-*-*------------------------------------------------------------------ GLIBC ------------------------------------------------------------------------

if [[ -f "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR-headers-build/make_sucessfully.done   &&  ! -f "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR-build/make_sucessfully.done ]]; then

	"$BUILDGCC_BUILDSCRIPTS"/Extract "$GLIBC_SOURCES_DIR" || exit 1
	
	rm -rf "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR-build
	mkdir "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR-build
	cd "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR-build 
	
	#cp -n "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/rpc_main.c.orig "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/rpc_main.c
	#cp -n "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/rpc_scan.c.orig "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR/sunrpc/rpc_scan.c
	
	
	#  install_root="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORMTmp \
	#  BUILD_CC="gcc -I$BUILDGCC_TOOLS_DIR/AppleDevTools/include" \
		
	../$GLIBC_SOURCES_DIR/configure \
	  BUILD_CC="gcc -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	  CC="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/bin/$TARGET_PLATFORM-gcc \
	  CXX="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/bin/$TARGET_PLATFORM-g++ \
	  AR="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/bin/$TARGET_PLATFORM-ar \
	  RANLIB="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/bin/$TARGET_PLATFORM-ranlib \
	  READELF="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/bin/$TARGET_PLATFORM-readelf \
	  --prefix= \
	  --build=$(../$GLIBC_SOURCES_DIR/scripts/config.guess) \
	  --host=$TARGET_PLATFORM \
      --with-headers="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/usr/include \
	  --with-binutils="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/bin \
	  --disable-multilib \
	  --enable-add-ons \
	  --enable-shared \
	  libc_cv_forced_unwind=yes \
	  libc_cv_c_cleanup=yes \
	  libc_cv_predef_stack_protector=yes \
	    2>&1 | tee configure-stdout.log
	
	
	if [[ -f config.status ]]; then
	    make $BUILDGCC_MAKEJOBS 2>&1 | tee make-stdout.log
	    [[ $? == 0 ]] && make install_root="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM install 2>&1 | tee make-install-stdout.log
	    [[ $? == 0 ]] && touch make_sucessfully.done
	fi

fi
if [ ! -f "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR-build/make_sucessfully.done ]
then
	echo *-*-*-*------------------------------------------------------------------ GLIBC failed------------------------------------------------------------------------
	exit 1
fi


echo *-*-*-*------------------------------------------------------------------ GCC cross 2 ------------------------------------------------------------------------

if [[ -f "$BUILDGCC_BUILD_DIR"/$GLIBC_SOURCES_DIR-build/make_sucessfully.done   &&  ! -f "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR-cross2-build/make_sucessfully.done ]]; then

    #Source must have been extracted and pacthed in GCC cross 1 step
	
	cp -n "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc.orig
	sed "739s|unsigned IOCTL_SCSI_IOCTL_TAGGED_DISABLE = SCSI_IOCTL_TAGGED_DISABLE|//unsigned IOCTL_SCSI_IOCTL_TAGGED_DISABLE = SCSI_IOCTL_TAGGED_DISABLE|" "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc.orig \
	  | sed "740s|unsigned IOCTL_SCSI_IOCTL_TAGGED_ENABLE = SCSI_IOCTL_TAGGED_ENABLE|//unsigned IOCTL_SCSI_IOCTL_TAGGED_ENABLE = SCSI_IOCTL_TAGGED_ENABLE|" \
	  >"$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc
	
	rm -rf "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR-cross2-build
	mkdir "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR-cross2-build
	cd "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR-cross2-build 
	
	../$GCC_SOURCES_DIR/configure \
	  CC="gcc -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	  CXX="g++ -I${BUILDGCC_TOOLS_DIR}/AppleDevTools/include" \
	 --target=$TARGET_PLATFORM \
	 --prefix="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM \
	 --with-local-prefix="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM \
	 --with-sysroot="$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM \
	 --enable-languages=c,c++  \
     --program-suffix=$PROGRAM_SUFFIX \
	 --enable-werror=no \
	 --enable-poison-system-directories \
	 --with-arch=armv7-a \
	 --with-float=hard \
	 --enable-__cxa_atexit \
	 --enable-libmudflap \
	 --enable-libgomp \
	 --enable-libssp \
	 --enable-libquadmath \
	 --enable-libquadmath-support \
	 --enable-libsanitizer \
	 --enable-threads=posix \
	 --enable-gold \
	 --disable-multilib \
	 --enable-c99 \
	 --enable-long-long \
	 --with-gmp="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	 --with-mpfr="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	 --with-mpc="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	 --with-isl="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	 --with-cloog="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	 --with-libelf="$BUILDGCC_BUILD_DIR"/$HOST_PLATFORM \
	    2>&1 | tee configure-stdout.log
	
	#--with-headers=$BUILDGCC_SYSTEM_HEADER_DIR <-- needed to copy includes in prefix/target/sys-include. Otherwise, configure failed saying preprocessor /lib/cpp can't run
	
	if [[ -f config.status ]]; then
	    make $BUILDGCC_MAKEJOBS 2>&1 | tee make-stdout.log
	    [[ $? == 0 ]] && make install 2>&1 | tee make-install-stdout.log
	    # looks like arm-none-linux-gnueabi-g++ is missing. Don't know why.
	    [[ $? == 0 ]] && cp "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/bin/g++-4.9.3 "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM/bin/arm-none-linux-gnueabi-g++
	    [[ $? == 0 ]] && touch make_sucessfully.done
	fi

fi
if [ ! -f "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR-cross2-build/make_sucessfully.done ]
then
	echo *-*-*-*------------------------------------------------------------------ GCC cross 2 failed------------------------------------------------------------------------
	exit 1
fi


if [[ -f "$BUILDGCC_BUILD_DIR"/$GCC_SOURCES_DIR-cross2-build/make_sucessfully.done ]]; then
	update_all_lib_path "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM || exit 1
	update_all_lib_path -r "$BUILDGCC_BUILD_DIR"/$TARGET_PLATFORM || exit 1
	cd "$BUILDGCC_BUILD_DIR"
	touch make_sucessfully.done
	echo *-*-*-*------------------------------------------------------------------ Finished ------------------------------------------------------------------------
fi